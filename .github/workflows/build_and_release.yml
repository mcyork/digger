name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: "trace"

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: digger-windows
            artifact_path: digger.exe
          - platform: macos-latest
            target: x86_64-apple-darwin
            artifact_name: digger-macos
            artifact_path: digger
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: digger-linux
            artifact_path: digger

    runs-on: ${{ matrix.platform }}

    permissions:
      contents: write  # Ensure the workflow has write permissions to contents

    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - if: ${{ runner.os == 'Windows' }}
        uses: ilammy/setup-nasm@v1
      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add ${{ matrix.target }}
      - name: Build (Unix)
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        run: cargo build --verbose --release
      - name: Build (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: cargo build --verbose --release
      - name: Upload Release Asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_path }}

      - name: Set Tag
        id: set_tag
        run: echo "TAG_NAME=v${GITHUB_SHA:0:7}-$(date +%s)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { GITHUB_TOKEN, TAG_NAME } = process.env;
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: TAG_NAME,
              name: `Release ${TAG_NAME}`,
              draft: false,
              prerelease: false,
            });
            core.setOutput("upload_url", response.data.upload_url);

      - name: Upload Release Asset to Release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { GITHUB_TOKEN } = process.env;

            async function uploadAsset(filePath, uploadUrl) {
              const fileName = path.basename(filePath);
              const fileStat = fs.statSync(filePath);
              const fileData = fs.readFileSync(filePath);

              await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': fileStat.size,
                },
                name: fileName,
                data: fileData,
              });
            }

            const uploadUrl = core.getInput('upload_url');
            const files = [
              'target/${{ matrix.target }}/release/${{ matrix.artifact_path }}',
            ];

            for (const file of files) {
              await uploadAsset(file, uploadUrl);
            }
