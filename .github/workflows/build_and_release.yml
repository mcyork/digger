name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: "trace"

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: digger-windows
            artifact_path: digger.exe
          - platform: macos-latest
            target: x86_64-apple-darwin
            artifact_name: digger-macos
            artifact_path: digger
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: digger-linux
            artifact_path: digger

    runs-on: ${{ matrix.platform }}

    permissions:
      contents: write  # Ensure the workflow has write permissions to contents

    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - if: ${{ runner.os == 'Windows' }}
        uses: ilammy/setup-nasm@v1
      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          rustup target add ${{ matrix.target }}
      - name: Build (Unix)
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        run: cargo build --verbose --release
      - name: Build (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: cargo build --verbose --release
      - name: List target directory
        run: ls -R target
      - name: Upload Release Asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/release/${{ matrix.artifact_path }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: digger-windows
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: digger-macos
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: digger-linux
          path: .

      - name: Set Tag
        id: set_tag
        run: echo "TAG_NAME=v${GITHUB_SHA:0:7}-$(date +%s)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { TAG_NAME } = process.env;
            console.log(`Creating release with tag: ${TAG_NAME}`);
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: TAG_NAME,
              name: `Release ${TAG_NAME}`,
              draft: false,
              prerelease: false,
            });
            core.setOutput("upload_url", response.data.upload_url);

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed -e 's/{?name,label}//')
          for file in digger-windows digger-macos digger-linux; do
            echo "Uploading $file to release ${TAG_NAME}"
            curl \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @$file \
              "$UPLOAD_URL?name=$(basename $file)"
          done
